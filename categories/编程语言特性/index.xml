<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言特性 on A few thoughts</title><link>https://www.fewth.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/</link><description>Recent content in 编程语言特性 on A few thoughts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 11 Oct 2021 16:51:51 +0000</lastBuildDate><atom:link href="https://www.fewth.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>jvm之自动内存管理-垃圾回收机制</title><link>https://www.fewth.com/jvm%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 11 Oct 2021 16:51:51 +0000</pubDate><guid>https://www.fewth.com/jvm%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>自动内存管理主要作用在&lt;code>堆(heap)&lt;/code>上，而虚拟机规范并没有限定自动内存管理的实现方式，本文以时下流行的&lt;code>HotSpot&lt;/code>虚拟机为例，介绍其中的自动内存管理（主要是垃圾回收）机制，以及它提供的几款垃圾回收器（Garbage Collector,简称GC）。&lt;/p></description></item><item><title>jvm之运行时数据区域</title><link>https://www.fewth.com/jvm%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</link><pubDate>Sun, 15 Aug 2021 13:48:20 +0000</pubDate><guid>https://www.fewth.com/jvm%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</guid><description>&lt;p>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.5">Java11虚拟机规范&lt;/a>中描述的，当执行一个程序时需要用到的几个运行时数据区域，具体的虚拟机实现可能并没有严格按照这个划分。&lt;/p></description></item><item><title>lua语言入门</title><link>https://www.fewth.com/lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 01 Aug 2021 08:43:19 +0000</pubDate><guid>https://www.fewth.com/lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</guid><description>&lt;h2 id="1-变量">1 变量&lt;/h2>
&lt;h3 id="变量名称">变量名称&lt;/h3>
&lt;p>变量由字母、数字、下划线组成，但不能由数字开头，且不建议&lt;code>_A**&lt;/code>这种下划线后接大写字母的方式，通常作为Lua内部特殊用途。下面的几个词是&lt;code>Lua&lt;/code>保留的关键字：&lt;/p></description></item><item><title>jvm之class文件及类加载机制和双亲委派模型</title><link>https://www.fewth.com/jvm%E4%B9%8Bclass%E6%96%87%E4%BB%B6%E5%8F%8A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</link><pubDate>Wed, 02 Jun 2021 16:04:54 +0000</pubDate><guid>https://www.fewth.com/jvm%E4%B9%8Bclass%E6%96%87%E4%BB%B6%E5%8F%8A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>本文先简单介绍虚拟机规范约定的&lt;code>class&lt;/code>文件格式，并从一个示例&lt;code>class&lt;/code>文件复原代码基本内容，最后描述虚拟机类加载机制以及介绍一下双亲委派模型。Java版本为11。&lt;/p></description></item><item><title>java注解</title><link>https://www.fewth.com/java%E6%B3%A8%E8%A7%A3/</link><pubDate>Fri, 07 May 2021 22:43:01 +0000</pubDate><guid>https://www.fewth.com/java%E6%B3%A8%E8%A7%A3/</guid><description>&lt;h2 id="1-java注解是什么">1 Java注解是什么?&lt;/h2>
&lt;p>根据&lt;a href="https://docs.oracle.com/javase/tutorial/java/annotations/">官方文档&lt;/a>说明，&lt;code>Java注解&lt;/code>是元数据的一种形式，它不直接影响我们代码本身的操作，但是有以下几个用途：&lt;/p>
&lt;ul>
&lt;li>给编译器提供信息-编译器可以用注解来检测错误或者抑制编译时的warning信息&lt;/li>
&lt;li>编译和部署代码时进一步加工&amp;mdash;一些工具可以根据注解生成额外的代码或文件&lt;/li>
&lt;li>运行时处理：一些注解可以在运行时被检测&lt;/li>
&lt;/ul></description></item></channel></rss>